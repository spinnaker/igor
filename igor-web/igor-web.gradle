
ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  versions = [
    cglib: '3.2.0',
    kork: '1.124.0',
    eureka: '1.8.6',
    groovy: '2.4.13',
    hamcrest: '1.3',
    jackson: '2.9.2',
    junit: '4.12',
    logstash: '4.11',
    objenesis: '2.5.1',
    okHttp: '2.7.0',
    retrofit: '1.9.0',
    rxJava: '1.0.16',
    snakeyaml: '1.15',
    spock: '1.1-groovy-2.4',
    spring: '4.3.14.RELEASE',
    springBoot: '1.5.10.RELEASE',
  ]
}

apply plugin: 'groovy'
apply plugin: 'application'

applicationName = 'igor'
mainClassName = 'com.netflix.spinnaker.igor.Main'
applicationDefaultJvmArgs << '-Djava.security.egd=file:/dev/./urandom'

run {
  systemProperty('spring.config.location', project.springConfigLocation)
}

task bootRun(dependsOn: 'run')

sourceSets {
    main {
        resources {
            srcDir 'config'
        }
    }
}

jar {
    exclude 'igor.yml'
}

distributions {
    main {
        contents {
            from('config') { into 'config' }
        }
    }
}

startScripts {
    defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
    doLast {
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
                    if [ -f /etc/default/spinnaker ]; then
                      set -a
                      . /etc/default/spinnaker
                      set +a
                    fi
                    DEFAULT_JVM_OPTS='''.stripIndent())
        unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
        windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-actuator:${versions.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-data-rest:${versions.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-web:${versions.springBoot}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    compile "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    compile "com.squareup.okhttp:okhttp:${versions.okHttp}"
    compile "com.squareup.okhttp:okhttp-urlconnection:${versions.okHttp}"
    compile "com.squareup.okhttp:okhttp-apache:${versions.okHttp}"
    compile "com.squareup.retrofit:retrofit:${versions.retrofit}"
    compile "com.squareup.retrofit:converter-jackson:${versions.retrofit}"
    compile "com.netflix.spinnaker.kork:kork-core:${versions.kork}"
    compile "com.netflix.spinnaker.kork:kork-dynomite:${versions.kork}"
    compile "com.netflix.spinnaker.kork:kork-jedis:${versions.kork}"
    compile "com.netflix.spinnaker.kork:kork-stackdriver:${versions.kork}"
    compile "com.netflix.spinnaker.kork:kork-hystrix:${versions.kork}"
    compile "com.netflix.spinnaker.kork:kork-web:${versions.kork}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
    compile "org.codehaus.groovy:groovy-all:${versions.groovy}"
    compile "io.reactivex:rxjava:${versions.rxJava}"
    compile "com.netflix.eureka:eureka-client:${versions.eureka}"
    compile "net.logstash.logback:logstash-logback-encoder:${versions.logstash}"
    compile "org.yaml:snakeyaml:${versions.snakeyaml}"
    compile "com.squareup.retrofit:converter-simplexml:${versions.retrofit}"

    testCompile "org.springframework.boot:spring-boot-starter-test:${versions.springBoot}"
    testCompile "org.spockframework:spock-core:${versions.spock}"
    testCompile "org.spockframework:spock-spring:${versions.spock}"
    testCompile "org.springframework:spring-test:${versions.spring}"
    testCompile "cglib:cglib-nodep:${versions.cglib}"
    testCompile "org.objenesis:objenesis:${versions.objenesis}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.hamcrest:hamcrest-core:${versions.hamcrest}"
    testCompile "com.squareup.retrofit:retrofit-mock:${versions.retrofit}"
    testCompile "com.squareup.okhttp:mockwebserver:${versions.okHttp}"
    testCompile "com.netflix.spinnaker.kork:kork-jedis-test:${versions.kork}"
}
