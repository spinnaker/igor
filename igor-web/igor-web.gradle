ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  repackage = System.getProperty('springBoot.repackage', "false")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

dependencies {
    spinnaker.group "test"
    spinnaker.group "bootWeb"
    spinnaker.group "jackson"
    spinnaker.group "retrofitDefault"

    compile spinnaker.dependency("kork")
    compile spinnaker.dependency("korkWeb")
    compile spinnaker.dependency("jedis")
    compile spinnaker.dependency("guava")
    compile spinnaker.dependency("groovy")
    compile spinnaker.dependency("rxJava")
    compile spinnaker.dependency("retrofit")
    compile spinnaker.dependency("eurekaClient")
    compile spinnaker.dependency("korkHystrix")
    compile spinnaker.dependency("okHttp")

    compile 'org.yaml:snakeyaml:1.15'
    compile 'com.squareup.retrofit:converter-simplexml:1.5.1'
    testCompile 'com.squareup.okhttp:mockwebserver:2.1.0'
}

configurations.all {
    resolutionStrategy {
        force 'org.apache.log4j:log4j:1.2.17'
        force 'com.google.guava:guava:14.0.1'
        force 'commons-codec:commons-codec:1.7'
    }
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.mortbay.jetty", module: "servlet-api"
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'config'
        }
    }
}

jar {
    doFirst {
        exclude "${rootProject.name}.yml"
    }
}

applicationName = 'igor'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
  into 'config'
}

startScripts {
  defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
        if [ -f /etc/default/spinnaker ]; then
          set -a
          . /etc/default/spinnaker
          set +a
        fi
        DEFAULT_JVM_OPTS='''.stripIndent())
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = "spinnaker-" + project.applicationName
  version = toVers(project.version.toString())
  release '3'
  os = LINUX

  // installer scripts
  postInstall = file('pkg_scripts/postInstall.sh')
  postUninstall = file('pkg_scripts/postUninstall.sh')

  from "${project.buildDir}/install/${project.applicationName}"
    into "/opt/${project.applicationName}"

  from(file('etc/init/igor.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('etc/logrotate.d/igor')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }
}

buildDeb {
  dependsOn installDist
}

tasks.bootRepackage.enabled = project.repackage
